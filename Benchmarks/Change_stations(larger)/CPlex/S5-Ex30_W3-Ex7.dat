// timeLimit giving the maximum solving time for the solver
timeLimit = 300;

numberWorkers = 3;
numberProducts = 10;
numberVariants = 1;
numberStations = 5;

// tuple workerTuples {key int id; int skill; int releasetime; int currentStation;};
workers = {
	 <1, 100, 0, 1>,
	 <2, 100, 0, 2>,
	 <3, 100, 0, 3>,
};

// tuple productTuples {key int id; int variant; int releasetime; int currentStation; int currentBuffer; int currentStep;};
// where for the current step: 0 = none, 1 = setup, 2 = manual, 3 = automatic, 4 = takedown 
products = {
	 <1, 1, 0, 0, 0, 0>,
	 <2, 1, 0, 0, 0, 0>,
	 <3, 1, 0, 0, 0, 0>,
	 <4, 1, 0, 0, 0, 0>,
	 <5, 1, 0, 0, 0, 0>,
	 <6, 1, 0, 0, 0, 0>,
	 <7, 1, 0, 0, 0, 0>,
	 <8, 1, 0, 0, 0, 0>,
	 <9, 1, 0, 0, 0, 0>,
	 <10, 1, 0, 0, 0, 0>,
};

// workstep duration times as [allVariants][allStations] matrix
workstepDurations = [[80, 80, 80, 100, 80]];

// is automatic flag as a [allVariants][allStations] matrix
isAutomatic = [[1, 1, 1, 0, 1]];

// setup times as a [allVariants][allStations] matrix
setupTimes = [[10, 10, 10, 0, 10]];

// takedown times as a [allVariants][allStations] matrix
takedownTimes = [[10, 10, 10, 0, 10]];

// worker walking times from station to station as a [allStations][allStations] matrix
workerWalkingTimes = [[0, 10, 20, 30, 40], [10, 0, 10, 20, 30], [20, 10, 0, 10, 20], [30, 20, 10, 0, 10], [40, 30, 20, 10, 0]];
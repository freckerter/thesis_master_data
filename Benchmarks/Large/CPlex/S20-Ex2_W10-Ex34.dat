// timeLimit giving the maximum solving time for the solver
timeLimit = 300;

numberWorkers = 10;
numberProducts = 15;
numberVariants = 1;
numberStations = 20;

// tuple workerTuples {key int id; int skill; int releasetime; int currentStation;};
workers = {
	 <1, 27, 0, 1>,
	 <2, 12, 0, 2>,
	 <3, 91, 0, 3>,
	 <4, 93, 0, 4>,
	 <5, 15, 0, 5>,
	 <6, 96, 0, 6>,
	 <7, 21, 0, 7>,
	 <8, 38, 0, 8>,
	 <9, 90, 0, 9>,
	 <10, 85, 0, 10>,
};

// tuple productTuples {key int id; int variant; int releasetime; int currentStation; int currentBuffer; int currentStep;};
// where for the current step: 0 = none, 1 = setup, 2 = manual, 3 = automatic, 4 = takedown 
products = {
	 <1, 1, 0, 0, 0, 0>,
	 <2, 1, 0, 0, 0, 0>,
	 <3, 1, 0, 0, 0, 0>,
	 <4, 1, 0, 0, 0, 0>,
	 <5, 1, 0, 0, 0, 0>,
	 <6, 1, 0, 0, 0, 0>,
	 <7, 1, 0, 0, 0, 0>,
	 <8, 1, 0, 0, 0, 0>,
	 <9, 1, 0, 0, 0, 0>,
	 <10, 1, 0, 0, 0, 0>,
	 <11, 1, 0, 0, 0, 0>,
	 <12, 1, 0, 0, 0, 0>,
	 <13, 1, 0, 0, 0, 0>,
	 <14, 1, 0, 0, 0, 0>,
	 <15, 1, 0, 0, 0, 0>,
};

// workstep duration times as [allVariants][allStations] matrix
workstepDurations = [[100, 100, 100, 80, 100, 100, 100, 80, 100, 100, 80, 100, 100, 100, 100, 100, 100, 80, 100, 80]];

// is automatic flag as a [allVariants][allStations] matrix
isAutomatic = [[0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1]];

// setup times as a [allVariants][allStations] matrix
setupTimes = [[0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 10, 0, 0, 0, 0, 0, 0, 10, 0, 10]];

// takedown times as a [allVariants][allStations] matrix
takedownTimes = [[0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 10, 0, 0, 0, 0, 0, 0, 10, 0, 10]];

// worker walking times from station to station as a [allStations][allStations] matrix
workerWalkingTimes = [[0, 10, 20, 30, 40, 50, 55, 51, 41, 32, 22, 14, 10, 16, 20, 22, 28, 36, 45, 54], [10, 0, 10, 20, 30, 40, 45, 41, 32, 22, 14, 10, 14, 21, 22, 20, 22, 28, 36, 45], [20, 10, 0, 10, 20, 30, 35, 32, 22, 14, 10, 14, 22, 29, 28, 22, 20, 22, 28, 36], [30, 20, 10, 0, 10, 20, 25, 22, 14, 10, 14, 22, 32, 38, 36, 28, 22, 20, 22, 28], [40, 30, 20, 10, 0, 10, 16, 14, 10, 14, 22, 32, 41, 47, 45, 36, 28, 22, 20, 22], [50, 40, 30, 20, 10, 0, 7, 10, 14, 22, 32, 41, 51, 57, 54, 45, 36, 28, 22, 20], [55, 45, 35, 25, 16, 7, 0, 7, 16, 25, 35, 45, 55, 61, 57, 47, 38, 29, 21, 16], [51, 41, 32, 22, 14, 10, 7, 0, 10, 20, 30, 40, 50, 55, 51, 41, 32, 22, 14, 10], [41, 32, 22, 14, 10, 14, 16, 10, 0, 10, 20, 30, 40, 45, 41, 32, 22, 14, 10, 14], [32, 22, 14, 10, 14, 22, 25, 20, 10, 0, 10, 20, 30, 35, 32, 22, 14, 10, 14, 22], [22, 14, 10, 14, 22, 32, 35, 30, 20, 10, 0, 10, 20, 25, 22, 14, 10, 14, 22, 32], [14, 10, 14, 22, 32, 41, 45, 40, 30, 20, 10, 0, 10, 16, 14, 10, 14, 22, 32, 41], [10, 14, 22, 32, 41, 51, 55, 50, 40, 30, 20, 10, 0, 7, 10, 14, 22, 32, 41, 51], [16, 21, 29, 38, 47, 57, 61, 55, 45, 35, 25, 16, 7, 0, 7, 16, 25, 35, 45, 55], [20, 22, 28, 36, 45, 54, 57, 51, 41, 32, 22, 14, 10, 7, 0, 10, 20, 30, 40, 50], [22, 20, 22, 28, 36, 45, 47, 41, 32, 22, 14, 10, 14, 16, 10, 0, 10, 20, 30, 40], [28, 22, 20, 22, 28, 36, 38, 32, 22, 14, 10, 14, 22, 25, 20, 10, 0, 10, 20, 30], [36, 28, 22, 20, 22, 28, 29, 22, 14, 10, 14, 22, 32, 35, 30, 20, 10, 0, 10, 20], [45, 36, 28, 22, 20, 22, 21, 14, 10, 14, 22, 32, 41, 45, 40, 30, 20, 10, 0, 10], [54, 45, 36, 28, 22, 20, 16, 10, 14, 22, 32, 41, 51, 55, 50, 40, 30, 20, 10, 0]];